generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  Masculino
  Feminino
  Outro
}

enum Visualize_style {
  List
  Card
}

enum Theme {
  Dark
  Light
  Custom
}

enum Community_type {
  Private
  Public
}

model User {
  id          String    @id
  email       String    @unique
  username    String    @unique
  password    String
  bio         String?
  birthday    DateTime?
  created_at  DateTime  @default(now())
  banner_img  String?
  profile_img String?
  karma       Int       @default(0)

  User_config                User_config?
  Post                       Post[]
  Comment                    Comment[]
  User_Friends               User_Friends[]
  User_Blockeds              User_Blockeds[]
  Comment_Replie             Comment_Replie[]
  User_Community_Follow      User_Community_Follow[]
  User_Silenced_Communities  User_Silenced_Communities[]
  User_Favorites_Communities User_Favorites_Communities[]
  Community_Mods             Community_Mods[]
  Community_Banned_Users     Community_Banned_Users[]
}

model User_config {
  id              String          @id
  user_id         String          @unique
  genre           Genre?
  user_links      String[]
  user_theme      Theme           @default(Light)
  visualize_style Visualize_style @default(Card)
  open_post_type  Boolean         @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Community {
  id            String         @id
  owner_id      String
  name          String         @unique
  bio           String?
  banner_img    String?
  profile_img   String?
  language      String?
  country       String?
  type          Community_type
  primary_topic String?
  topics        String[]
  nsfw          Boolean?       @default(false)
  created_at    DateTime       @default(now())
  rules         Json[]
  flags         Json[]

  Community_style            Community_style?
  Post                       Post[]
  Community_Mods             Community_Mods[]
  User_Community_Follow      User_Community_Follow[]
  Community_Banned_Users     Community_Banned_Users[]
  User_Silenced_Communities  User_Silenced_Communities[]
  User_Favorites_Communities User_Favorites_Communities[]
}

model Community_style {
  id                    String  @id
  community_id          String  @unique
  member_name           String?
  post_name             String?
  theme_color           String?
  body_color            String?
  post_title_color      String?
  post_background_color String?

  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id           String    @id
  community_id String
  user_id      String
  title        String
  description  String?
  img          String?
  created_at   DateTime  @default(now())
  updated_at   DateTime?
  votes        BigInt    @default(0)
  spoiler      Boolean

  Comment   Comment[]
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id          String    @id
  post_id     String
  user_id     String
  description String
  votes       BigInt    @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post           Post             @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Comment_Replie Comment_Replie[]
}

model Comment_Replie {
  id          String    @id
  user_id     String
  comment_id  String
  description String
  votes       BigInt    @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Relation

model User_Community_Follow {
  id             String   @id @default(uuid())
  user_id        String
  community_id   String
  user_name      String
  community_name String
  created_at     DateTime @default(now())

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User_Friends {
  id            String @id
  user_id       String
  followed_user String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User_Blockeds {
  id           String @id
  user_id      String
  blocked_user String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User_Favorites_Communities {
  id             String @id
  user_id        String
  community_id   String
  user_name      String
  community_name String

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User_Silenced_Communities {
  id           String @id
  user_id      String
  community_id String

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Community_Mods {
  id             String @id
  community_id   String
  user_id        String
  user_name      String
  community_name String

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Community_Banned_Users {
  id           String @id
  community_id String
  banner_id    String

  user      User      @relation(fields: [banner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  community Community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
